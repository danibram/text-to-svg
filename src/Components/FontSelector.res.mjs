// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Input from "./Input.res.mjs";
import * as React from "react";
import * as Select from "./Select.res.mjs";
import * as GoogleFont from "../Vendor/GoogleFont.res.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as FilerReader from "../Vendor/FilerReader.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as JsxRuntime from "react/jsx-runtime";

var notificationMethods = [
  [
    "customFile",
    "Upload font file"
  ],
  [
    "googleFont",
    "Google font"
  ],
  [
    "url",
    "Url"
  ]
];

function FontSelector(props) {
  var onSelectFont = props.onSelectFont;
  var match = React.useState(function () {
        
      });
  var setFontUrl = match[1];
  var match$1 = React.useState(function () {
        
      });
  var setErr = match$1[1];
  var err = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setFonts = match$2[1];
  var fonts = match$2[0];
  var match$3 = React.useState(function () {
        
      });
  var setFontSelected = match$3[1];
  var match$4 = React.useState(function () {
        return true;
      });
  var setLoading = match$4[1];
  var match$5 = React.useState(function () {
        return "googleFont";
      });
  var setMethod = match$5[1];
  var method = match$5[0];
  var loadGoogleFonts = async function () {
    setLoading(function (param) {
          return true;
        });
    var fonts = await GoogleFont.load();
    setFonts(function (param) {
          return fonts;
        });
    return setLoading(function (param) {
                return false;
              });
  };
  var setFirstFontVariant = function (fontSelected) {
    Core__Option.forEach(Belt_Option.flatMap(Core__Option.flatMap(fonts, (function (__x) {
                    return Belt_MapString.get(__x, fontSelected);
                  })), (function (font) {
                return Core__Option.flatMap(Belt_MapString.keysToArray(font.files)[0], (function (__x) {
                              return Belt_MapString.get(font.files, __x);
                            }));
              })), (function (file) {
            onSelectFont(file);
          }));
  };
  React.useEffect((function () {
          loadGoogleFonts();
        }), []);
  return JsxRuntime.jsx(JsxRuntime.Fragment, {
              children: Caml_option.some(JsxRuntime.jsxs("div", {
                        children: [
                          JsxRuntime.jsx("label", {
                                children: "Font source",
                                className: "text-base font-semibold text-gray-900"
                              }),
                          JsxRuntime.jsx("p", {
                                children: "How you wanna select the font",
                                className: "text-sm text-gray-500"
                              }),
                          JsxRuntime.jsxs("fieldset", {
                                children: [
                                  JsxRuntime.jsx("legend", {
                                        children: "Font source",
                                        className: "sr-only"
                                      }),
                                  JsxRuntime.jsx("div", {
                                        children: notificationMethods.map(function (param) {
                                              var id = param[0];
                                              return JsxRuntime.jsxs("div", {
                                                          children: [
                                                            JsxRuntime.jsx("input", {
                                                                  defaultChecked: id === "googleFont",
                                                                  className: "h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600",
                                                                  id: id,
                                                                  name: "notification-method",
                                                                  type: "radio",
                                                                  onClick: (function (param) {
                                                                      if (id === "googleFont") {
                                                                        setMethod(function (param) {
                                                                              return "googleFont";
                                                                            });
                                                                        loadGoogleFonts();
                                                                      }
                                                                      if (id === "customFile") {
                                                                        setMethod(function (param) {
                                                                              return "customFile";
                                                                            });
                                                                      }
                                                                      if (id === "url") {
                                                                        return setMethod(function (param) {
                                                                                    return "url";
                                                                                  });
                                                                      }
                                                                      
                                                                    })
                                                                }),
                                                            JsxRuntime.jsx("label", {
                                                                  children: param[1],
                                                                  className: "ml-3 block text-sm font-medium leading-6 text-gray-900",
                                                                  htmlFor: id
                                                                })
                                                          ],
                                                          className: "flex items-center"
                                                        }, id);
                                            }),
                                        className: "space-y-4 sm:flex sm:items-center sm:space-x-10 sm:space-y-0 w-full"
                                      }),
                                  JsxRuntime.jsxs("div", {
                                        children: [
                                          method === "googleFont" ? (
                                              fonts !== undefined ? JsxRuntime.jsx(Select.make, {
                                                      label: "Google font",
                                                      options: Belt_MapString.toArray(Caml_option.valFromOption(fonts)).map(function (param) {
                                                            var k = param[0];
                                                            return [
                                                                    k,
                                                                    k
                                                                  ];
                                                          }),
                                                      onChange: (function (value) {
                                                          setFirstFontVariant(value);
                                                          setFontSelected(function (param) {
                                                                return value;
                                                              });
                                                        }),
                                                      value: Core__Option.getOr(match$3[0], "__none")
                                                    }) : (
                                                  match$4[0] ? JsxRuntime.jsx("div", {
                                                          children: "Loading..."
                                                        }) : JsxRuntime.jsx("div", {
                                                          children: "Error loading..."
                                                        })
                                                )
                                            ) : null,
                                          method === "url" ? JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                  children: [
                                                    JsxRuntime.jsx(Input.make, {
                                                          label: "Url",
                                                          value: Core__Option.getOr(match[0], ""),
                                                          onChange: (function (value) {
                                                              var value$1 = Input.getText(value);
                                                              setFontUrl(function (param) {
                                                                    return value$1;
                                                                  });
                                                              var errorMsg = "Invalid url";
                                                              setErr(function (param) {
                                                                    
                                                                  });
                                                              var re = /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:\/?#[\]@!\$&'\(\)\*\+,;=.]+.(ttf)$/g;
                                                              if (re.test(value$1)) {
                                                                return onSelectFont(value$1);
                                                              } else {
                                                                return setErr(function (param) {
                                                                            return errorMsg;
                                                                          });
                                                              }
                                                            }),
                                                          className: "w-full"
                                                        }),
                                                    err !== undefined ? JsxRuntime.jsx("p", {
                                                            children: err,
                                                            className: "text-sm text-red-500"
                                                          }) : null
                                                  ]
                                                }) : null,
                                          method === "customFile" ? JsxRuntime.jsx(Input.make, {
                                                  type_: "file",
                                                  label: "Upload file",
                                                  onChange: (function (value) {
                                                      Core__Option.forEach(Input.getFile(value), (function (file) {
                                                              FilerReader.fileToDataUrl(file, (function (url) {
                                                                      onSelectFont(url);
                                                                    }));
                                                            }));
                                                    }),
                                                  className: "w-full"
                                                }) : null
                                        ],
                                        className: "text-sm w-full"
                                      })
                                ],
                                className: "mt-4 flex gap-4 items-center w-full"
                              })
                        ],
                        className: "border-b border-gray-200 bg-white px-4 py-5 sm:px-6"
                      }))
            });
}

var make = FontSelector;

export {
  notificationMethods ,
  make ,
}
/* Input Not a pure module */
