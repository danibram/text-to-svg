// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Lib from "./Lib.res.mjs";
import * as Utils from "./Utils.res.mjs";
import * as React from "react";
import * as Button from "./Components/Button.res.mjs";
import * as MakerJS from "./Vendor/MakerJS.res.mjs";
import * as Makerjs from "makerjs";
import * as Opentype from "./Vendor/Opentype.res.mjs";
import * as OptionsForm from "./Components/OptionsForm.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as FontSelector from "./Components/FontSelector.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function App(props) {
  var match = React.useState(function () {
        
      });
  var setTime = match[1];
  var time = match[0];
  var match$1 = React.useState(function () {
        
      });
  var setFontUrl = match$1[1];
  var fontUrl = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setSvg = match$2[1];
  var svg = match$2[0];
  var match$3 = React.useState(function () {
        return {
                text: "This is the way",
                fontSize: 72,
                canvasWidth: 200,
                letterSpacing: 0,
                lineHeight: 1.5,
                align: "left",
                fill: "black",
                stroke: "black",
                strokeWidth: 0.25,
                fillRule: "evenodd"
              };
      });
  var setOptions = match$3[1];
  var options = match$3[0];
  var update = function (param) {
    var match = param[1];
    var fillRule = match.fillRule;
    var strokeWidth = match.strokeWidth;
    var stroke = match.stroke;
    var fill = match.fill;
    var align = match.align;
    var lineHeight = match.lineHeight;
    var letterSpacing = match.letterSpacing;
    var canvasWidth = match.canvasWidth;
    var fontSize = match.fontSize;
    var text = match.text;
    var startTime = Date.now();
    Core__Option.forEach(param[0], (function (fontUrl) {
            Opentype.Font.load(fontUrl).then(function (fontResult) {
                    if (fontResult.TAG === "Ok") {
                      var svg = Makerjs.exporter.toSVG(Lib.composeModel(text, letterSpacing, fontResult._0, fontSize, lineHeight, align, canvasWidth), MakerJS.Options.make(fill, stroke, strokeWidth, fillRule, undefined, undefined, undefined, undefined, undefined, undefined, undefined));
                      setSvg(function (param) {
                            return svg;
                          });
                      return Promise.resolve();
                    }
                    console.error(fontResult._0.toString());
                    return Promise.resolve();
                  }).then(function () {
                  var endTime = Date.now();
                  setTime(function (param) {
                        return endTime - startTime;
                      });
                  return Promise.resolve();
                });
          }));
  };
  var updateDebounced = Utils.useDebounced(500, update);
  var optionsUpdate = React.useCallback((function (options) {
          setOptions(function (param) {
                return options;
              });
          updateDebounced([
                fontUrl,
                options
              ]);
        }), [fontUrl]);
  var fontUpdate = React.useCallback((function (fontUrl) {
          setFontUrl(function (param) {
                return fontUrl;
              });
          updateDebounced([
                fontUrl,
                options
              ]);
        }), [options]);
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsx("div", {
                          children: JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("div", {
                                        children: JsxRuntime.jsx("h3", {
                                              children: "Text to svg",
                                              className: "text-base font-semibold leading-6 text-gray-900"
                                            }),
                                        className: "border-b border-gray-200 bg-white px-4 py-5 sm:px-6"
                                      }),
                                  JsxRuntime.jsx(FontSelector.make, {
                                        onSelectFont: fontUpdate
                                      }),
                                  JsxRuntime.jsxs("div", {
                                        children: [
                                          JsxRuntime.jsx(OptionsForm.make, {
                                                options: options,
                                                onChange: optionsUpdate
                                              }),
                                          JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsx(Button.make, {
                                                        label: "Download SVG",
                                                        onClick: (function (param) {
                                                            Core__Option.forEach(svg, (function (__x) {
                                                                    Utils.download(__x, Utils.stringSanitize(options.text));
                                                                  }));
                                                          }),
                                                        disabled: svg === undefined
                                                      }),
                                                  JsxRuntime.jsxs("div", {
                                                        children: [
                                                          "Time: ",
                                                          time !== undefined ? time.toString() + "ms" : "-"
                                                        ],
                                                        className: "ml-4"
                                                      })
                                                ],
                                                className: "flex items-center"
                                              })
                                        ],
                                        className: "border-b border-gray-200 bg-white px-4 py-5 sm:px-6 flex flex-col gap-4"
                                      }),
                                  JsxRuntime.jsx("div", {
                                        children: svg !== undefined ? JsxRuntime.jsx("div", {
                                                className: "bg-white p-6 w-fit",
                                                dangerouslySetInnerHTML: {
                                                  __html: svg
                                                }
                                              }) : JsxRuntime.jsx("div", {
                                                children: "No SVG"
                                              }),
                                        className: "border-b border-gray-200 bg-white px-4 py-5 sm:px-6"
                                      })
                                ],
                                className: "overflow-hidden bg-white sm:rounded-lg sm:shadow"
                              }),
                          className: "mx-auto max-w-none"
                        }),
                    className: "mx-auto max-w-7xl py-6 sm:px-6 lg:px-8"
                  }),
              className: "bg-gray-100"
            });
}

var make = App;

export {
  make ,
}
/* Lib Not a pure module */
